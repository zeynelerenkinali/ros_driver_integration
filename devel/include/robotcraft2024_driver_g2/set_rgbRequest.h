// Generated by gencpp from file robotcraft2024_driver_g2/set_rgbRequest.msg
// DO NOT EDIT!


#ifndef ROBOTCRAFT2024_DRIVER_G2_MESSAGE_SET_RGBREQUEST_H
#define ROBOTCRAFT2024_DRIVER_G2_MESSAGE_SET_RGBREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotcraft2024_driver_g2
{
template <class ContainerAllocator>
struct set_rgbRequest_
{
  typedef set_rgbRequest_<ContainerAllocator> Type;

  set_rgbRequest_()
    : r(0)
    , g(0)
    , b(0)  {
    }
  set_rgbRequest_(const ContainerAllocator& _alloc)
    : r(0)
    , g(0)
    , b(0)  {
  (void)_alloc;
    }



   typedef uint8_t _r_type;
  _r_type r;

   typedef uint8_t _g_type;
  _g_type g;

   typedef uint8_t _b_type;
  _b_type b;





  typedef boost::shared_ptr< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> const> ConstPtr;

}; // struct set_rgbRequest_

typedef ::robotcraft2024_driver_g2::set_rgbRequest_<std::allocator<void> > set_rgbRequest;

typedef boost::shared_ptr< ::robotcraft2024_driver_g2::set_rgbRequest > set_rgbRequestPtr;
typedef boost::shared_ptr< ::robotcraft2024_driver_g2::set_rgbRequest const> set_rgbRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator1> & lhs, const ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator2> & rhs)
{
  return lhs.r == rhs.r &&
    lhs.g == rhs.g &&
    lhs.b == rhs.b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator1> & lhs, const ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotcraft2024_driver_g2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "353891e354491c51aabe32df673fb446";
  }

  static const char* value(const ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x353891e354491c51ULL;
  static const uint64_t static_value2 = 0xaabe32df673fb446ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotcraft2024_driver_g2/set_rgbRequest";
  }

  static const char* value(const ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 r\n"
"uint8 g\n"
"uint8 b\n"
;
  }

  static const char* value(const ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r);
      stream.next(m.g);
      stream.next(m.b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_rgbRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotcraft2024_driver_g2::set_rgbRequest_<ContainerAllocator>& v)
  {
    s << indent << "r: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.r);
    s << indent << "g: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g);
    s << indent << "b: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTCRAFT2024_DRIVER_G2_MESSAGE_SET_RGBREQUEST_H
